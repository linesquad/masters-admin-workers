/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as AuthenticateddashboardsIndexRouteImport } from './routes/_authenticated/(dashboards)/index'
import { Route as AuthenticateddashboardsMasterRouteImport } from './routes/_authenticated/(dashboards)/master'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticateddashboardsIndexRoute =
  AuthenticateddashboardsIndexRouteImport.update({
    id: '/(dashboards)/',
    path: '/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticateddashboardsMasterRoute =
  AuthenticateddashboardsMasterRouteImport.update({
    id: '/(dashboards)/master',
    path: '/master',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof authLoginRoute
  '/master': typeof AuthenticateddashboardsMasterRoute
  '/': typeof AuthenticateddashboardsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof authLoginRoute
  '/master': typeof AuthenticateddashboardsMasterRoute
  '/': typeof AuthenticateddashboardsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/_authenticated/(dashboards)/master': typeof AuthenticateddashboardsMasterRoute
  '/_authenticated/(dashboards)/': typeof AuthenticateddashboardsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/master' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/master' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/login'
    | '/_authenticated/(dashboards)/master'
    | '/_authenticated/(dashboards)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  authLoginRoute: typeof authLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/(dashboards)/master': {
      id: '/_authenticated/(dashboards)/master'
      path: '/master'
      fullPath: '/master'
      preLoaderRoute: typeof AuthenticateddashboardsMasterRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/(dashboards)/': {
      id: '/_authenticated/(dashboards)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticateddashboardsIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

declare module './routes/_authenticated' {
  const createFileRoute: CreateFileRoute<
    '/_authenticated',
    FileRoutesByPath['/_authenticated']['parentRoute'],
    FileRoutesByPath['/_authenticated']['id'],
    FileRoutesByPath['/_authenticated']['path'],
    FileRoutesByPath['/_authenticated']['fullPath']
  >
}
declare module './routes/(auth)/login' {
  const createFileRoute: CreateFileRoute<
    '/(auth)/login',
    FileRoutesByPath['/(auth)/login']['parentRoute'],
    FileRoutesByPath['/(auth)/login']['id'],
    FileRoutesByPath['/(auth)/login']['path'],
    FileRoutesByPath['/(auth)/login']['fullPath']
  >
}
declare module './routes/_authenticated/(dashboards)/master' {
  const createFileRoute: CreateFileRoute<
    '/_authenticated/(dashboards)/master',
    FileRoutesByPath['/_authenticated/(dashboards)/master']['parentRoute'],
    FileRoutesByPath['/_authenticated/(dashboards)/master']['id'],
    FileRoutesByPath['/_authenticated/(dashboards)/master']['path'],
    FileRoutesByPath['/_authenticated/(dashboards)/master']['fullPath']
  >
}
declare module './routes/_authenticated/(dashboards)/index' {
  const createFileRoute: CreateFileRoute<
    '/_authenticated/(dashboards)/',
    FileRoutesByPath['/_authenticated/(dashboards)/']['parentRoute'],
    FileRoutesByPath['/_authenticated/(dashboards)/']['id'],
    FileRoutesByPath['/_authenticated/(dashboards)/']['path'],
    FileRoutesByPath['/_authenticated/(dashboards)/']['fullPath']
  >
}

interface AuthenticatedRouteChildren {
  AuthenticateddashboardsMasterRoute: typeof AuthenticateddashboardsMasterRoute
  AuthenticateddashboardsIndexRoute: typeof AuthenticateddashboardsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticateddashboardsMasterRoute: AuthenticateddashboardsMasterRoute,
  AuthenticateddashboardsIndexRoute: AuthenticateddashboardsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  authLoginRoute: authLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
